{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SupportedModes = void 0;\n\nconst react_1 = __importDefault(require(\"react\"));\n\nconst IconExit_1 = __importDefault(require(\"../icons/IconExit\"));\n\nconst ToastManager_1 = require(\"../toast-manager/ToastManager\");\n\nconst InspectorPanel_components_1 = require(\"./InspectorPanel.components\");\n\nconst noop = () => {};\n\nvar SupportedModes;\n\n(function (SupportedModes) {\n  SupportedModes[SupportedModes[\"CLOSED\"] = 0] = \"CLOSED\";\n  SupportedModes[SupportedModes[\"OPENED\"] = 1] = \"OPENED\";\n})(SupportedModes = exports.SupportedModes || (exports.SupportedModes = {}));\n\nconst InspectorPanel = ({\n  title,\n  id,\n  mode = SupportedModes.CLOSED,\n  customWidth,\n  fullHeight = false,\n  children,\n  actions,\n  onClose = noop\n}) => {\n  const inspectorMode = {\n    [SupportedModes.CLOSED]: 'closed',\n    [SupportedModes.OPENED]: 'opened'\n  }[mode];\n  const {\n    empty\n  } = ToastManager_1.useToasts();\n  react_1.default.useEffect(() => {\n    empty();\n  }, [id]); // @TODO for Action. Create a component, and use in replacement of the divs that are passed in\n\n  return react_1.default.createElement(InspectorPanel_components_1.InspectorPanel, {\n    customWidth: customWidth,\n    mode: inspectorMode,\n    \"data-testid\": \"InspectorPanel\",\n    fullHeight: fullHeight\n  }, react_1.default.createElement(InspectorPanel_components_1.InspectorHeader, null, title, react_1.default.createElement(InspectorPanel_components_1.InspectorAction, {\n    onClick: onClose\n  }, react_1.default.createElement(IconExit_1.default, {\n    color: \"alt\"\n  })), actions && react_1.default.createElement(InspectorPanel_components_1.InspectorActions, null, actions.map(actionEl => react_1.default.createElement(InspectorPanel_components_1.InspectorAction, Object.assign({\n    as: actionEl.type,\n    key: actionEl.key\n  }, actionEl.props, {\n    sx: {\n      variant: 'InspectorPanel.Action'\n    }\n  }))))), react_1.default.createElement(InspectorPanel_components_1.InspectorBody, null, children));\n};\n\nexports.default = InspectorPanel;","map":{"version":3,"sources":["../../../src/components/inspector-panel/InspectorPanel.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,MAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,MAAA,2BAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAQA,MAAM,IAAI,GAAG,MAAK,CAAG,CAArB;;AAYA,IAAY,cAAZ;;AAAA,CAAA,UAAY,cAAZ,EAA0B;AACxB,EAAA,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAHD,EAAY,cAAc,GAAd,OAAA,CAAA,cAAA,KAAA,OAAA,CAAA,cAAA,GAAc,EAAd,CAAZ;;AAOA,MAAM,cAAc,GAAmB,CAAC;AACtC,EAAA,KADsC;AAEtC,EAAA,EAFsC;AAGtC,EAAA,IAAI,GAAG,cAAc,CAAC,MAHgB;AAItC,EAAA,WAJsC;AAKtC,EAAA,UAAU,GAAG,KALyB;AAMtC,EAAA,QANsC;AAOtC,EAAA,OAPsC;AAQtC,EAAA,OAAO,GAAG;AAR4B,CAAD,KASlC;AACH,QAAM,aAAa,GAAG;AACpB,KAAC,cAAc,CAAC,MAAhB,GAAyB,QADL;AAEpB,KAAC,cAAc,CAAC,MAAhB,GAAyB;AAFL,IAGpB,IAHoB,CAAtB;AAKA,QAAM;AAAE,IAAA;AAAF,MAAY,cAAA,CAAA,SAAA,EAAlB;AAEA,EAAA,OAAA,CAAA,OAAA,CAAM,SAAN,CAAgB,MAAK;AACnB,IAAA,KAAK;AACN,GAFD,EAEG,CAAC,EAAD,CAFH,EARG,CAWH;;AACA,SACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,2BAAA,CAAA,cAAD,EAAwB;AACtB,IAAA,WAAW,EAAE,WADS;AAEtB,IAAA,IAAI,EAAE,aAFgB;AAEH,mBACP,gBAHU;AAItB,IAAA,UAAU,EAAE;AAJU,GAAxB,EAME,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,2BAAA,CAAA,eAAD,EAAgB,IAAhB,EACG,KADH,EAEE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,2BAAA,CAAA,eAAD,EAAgB;AAAC,IAAA,OAAO,EAAE;AAAV,GAAhB,EACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,UAAA,CAAA,OAAD,EAAS;AAAC,IAAA,KAAK,EAAC;AAAP,GAAT,CADF,CAFF,EAKG,OAAO,IACN,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,2BAAA,CAAA,gBAAD,EAAiB,IAAjB,EACG,OAAO,CAAC,GAAR,CAAY,QAAQ,IACnB,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,2BAAA,CAAA,eAAD,EAAgB,MAAA,CAAA,MAAA,CAAA;AACd,IAAA,EAAE,EAAE,QAAQ,CAAC,IADC;AAEd,IAAA,GAAG,EAAE,QAAQ,CAAC;AAFA,GAAA,EAGV,QAAQ,CAAC,KAHC,EAGI;AAClB,IAAA,EAAE,EAAE;AAAE,MAAA,OAAO,EAAE;AAAX;AADc,GAHJ,CAAhB,CADD,CADH,CANJ,CANF,EAyBE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,2BAAA,CAAA,aAAD,EAAc,IAAd,EAAgB,QAAhB,CAzBF,CADF;AA6BD,CAlDD;;AAoDA,OAAA,CAAA,OAAA,GAAe,cAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SupportedModes = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst IconExit_1 = __importDefault(require(\"../icons/IconExit\"));\nconst ToastManager_1 = require(\"../toast-manager/ToastManager\");\nconst InspectorPanel_components_1 = require(\"./InspectorPanel.components\");\nconst noop = () => { };\nvar SupportedModes;\n(function (SupportedModes) {\n    SupportedModes[SupportedModes[\"CLOSED\"] = 0] = \"CLOSED\";\n    SupportedModes[SupportedModes[\"OPENED\"] = 1] = \"OPENED\";\n})(SupportedModes = exports.SupportedModes || (exports.SupportedModes = {}));\nconst InspectorPanel = ({ title, id, mode = SupportedModes.CLOSED, customWidth, fullHeight = false, children, actions, onClose = noop, }) => {\n    const inspectorMode = {\n        [SupportedModes.CLOSED]: 'closed',\n        [SupportedModes.OPENED]: 'opened',\n    }[mode];\n    const { empty } = ToastManager_1.useToasts();\n    react_1.default.useEffect(() => {\n        empty();\n    }, [id]);\n    // @TODO for Action. Create a component, and use in replacement of the divs that are passed in\n    return (react_1.default.createElement(InspectorPanel_components_1.InspectorPanel, { customWidth: customWidth, mode: inspectorMode, \"data-testid\": \"InspectorPanel\", fullHeight: fullHeight },\n        react_1.default.createElement(InspectorPanel_components_1.InspectorHeader, null,\n            title,\n            react_1.default.createElement(InspectorPanel_components_1.InspectorAction, { onClick: onClose },\n                react_1.default.createElement(IconExit_1.default, { color: \"alt\" })),\n            actions && (react_1.default.createElement(InspectorPanel_components_1.InspectorActions, null, actions.map(actionEl => (react_1.default.createElement(InspectorPanel_components_1.InspectorAction, Object.assign({ as: actionEl.type, key: actionEl.key }, actionEl.props, { sx: { variant: 'InspectorPanel.Action' } }))))))),\n        react_1.default.createElement(InspectorPanel_components_1.InspectorBody, null, children)));\n};\nexports.default = InspectorPanel;\n//# sourceMappingURL=InspectorPanel.js.map"]},"metadata":{},"sourceType":"script"}