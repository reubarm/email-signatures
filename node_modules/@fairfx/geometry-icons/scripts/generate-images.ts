import * as dotenv from "dotenv";
import * as Figma from "figma-js";
import axios from "axios";
import { createWriteStream, mkdirSync } from "fs";
import { writeFile } from "fs-extra";
import { camelCase } from "lodash";

import { OUTPUT_DIR } from './constants';

const dotenvState = dotenv.config();

if (dotenvState.error) {
  throw dotenvState.error;
}

const config = {
  PERSONAL_ACCESS_TOKEN: process.env.PERSONAL_ACCESS_TOKEN as string,
  FILE_KEY: process.env.FILE_KEY as string,
};

const token = config.PERSONAL_ACCESS_TOKEN;

const client = Figma.Client({
  personalAccessToken: token,
});

type IFileBase = Pick<Figma.FileImageParams, "format" | "scale">;

interface IFile extends IFileBase {
  outputDir: string;
}

const formats: IFile[] = [
  {
    format: "png",
    outputDir: `./${OUTPUT_DIR}/images/native`,
    scale: 1,
  },
  {
    format: "png",
    outputDir: `./${OUTPUT_DIR}/images/native`,
    scale: 2,
  },
  {
    format: "png",
    outputDir: `./${OUTPUT_DIR}/images/native`,
    scale: 3,
  },
  {
    format: "svg",
    outputDir: `./${OUTPUT_DIR}/images/web`,
    scale: 1,
  },
];

const retrieveAssets = async () => {
  try {
    const file = await client.file(config.FILE_KEY);

    const { components } = file.data;

    let boldIcons: any[] = [];
    const nativeExportLines = new Set();

    for (let [key, value] of Object.entries(components)) {
      if (
        value.name.toLowerCase().includes("24 / bold /") &&
        !value.name.toLowerCase().includes("duplicate")
      ) {
        const name = value.name
          .replace("24 / Bold / ", "")
          .replace(/ /g, "-")
          .replace(/_/g, "-")
          .replace(/,/g, "")
          .toLowerCase();

        nativeExportLines.add(
          `'${camelCase(name)}': require("../images/native/${name}.png"),`
        );

        boldIcons.push({
          ...value,
          name,
          key,
        });
      }
    }

    const allComponents = boldIcons.map((icon: any) => icon.key);
    const allImages = Promise.all(
      formats.map(async ({ format, scale }) =>
        client
          .fileImages(config.FILE_KEY, {
            ids: allComponents,
            scale,
            format,
          })
          .then((res) => res.data.images)
          .catch((e) => console.error(e))
      )
    );

    const images = await Promise.all([allImages]).then((res) => res[0]);

    await Promise.all(
      images.map(async (size, index) => {
        await Promise.all(
          allComponents.map((img: any) => {
            const itemIndex = boldIcons.findIndex(
              (item: any) => item.key === img
            );
            return (
              axios
                // @ts-ignore
                .get(size[img], { responseType: "stream" })
                .then((res) => {
                  const extension =
                    formats[index].scale! > 1
                      ? `@${formats[index].scale}x.${formats[index].format}`
                      : `.${formats[index].format}`;
                  const name = boldIcons[itemIndex].name;

                  if (name.includes('/')) {
                    console.error('Name includes "/". We don\'t support slashes. Skipping.', name)
                    return;
                  }

                  return res.data.pipe(
                    createWriteStream(
                      `${formats[index].outputDir}/${name}${extension}`
                    )
                  );
                })
            );
          })
        );
      })
    )
      .then(() => {
        const nativeExportLinesArray = [...nativeExportLines];

        const contents = `
          /*
            THIS IS A GENERATED FILE.
          */

          export default {
            ${nativeExportLinesArray.join("\n")}
          };
        `;
        writeFile(`${OUTPUT_DIR}/native.ts`, contents);
      })
      .then(() => {
        console.log(`Successully created ${boldIcons.length} icons`);
        return;
      });
  } catch (err) {
    console.error(err);
  }
};

const setupDirectories = async () => {
  await mkdirSync(`${OUTPUT_DIR}/images/native`, { recursive: true });
  await mkdirSync(`${OUTPUT_DIR}/images/web`, { recursive: true });
  await mkdirSync(`${OUTPUT_DIR}/components`, { recursive: true });
};

export const generateImages = async () => {
  await setupDirectories();
  await retrieveAssets();
};
