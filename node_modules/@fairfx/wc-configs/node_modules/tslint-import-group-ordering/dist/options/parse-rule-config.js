"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nodes_containers_1 = require("../nodes-containers");
const get_imports_group_predicate_1 = require("./get-imports-group-predicate");
function parseRuleConfig(sourceFile, ruleConfig) {
    const importsGroups = parseImportsGroups(sourceFile, ruleConfig['imports-groups']);
    const matchingRules = parseMatchingRuleConfigs(sourceFile, importsGroups, ruleConfig['matching-rules']);
    return {
        importsGroups,
        matchingRules
    };
}
exports.parseRuleConfig = parseRuleConfig;
function parseImportsGroups(sourceFile, importsGroupConfigs) {
    if (!importsGroupConfigs) {
        throw new Error('Invalid rule configuration. Imports groups are required.');
    }
    const encounteredImportsGroupsNames = {};
    return importsGroupConfigs.map((importsGroupConfig, index) => {
        if (encounteredImportsGroupsNames[importsGroupConfig.name]) {
            throw new Error(`Duplicated imports group. An imports group with the name ${importsGroupConfig.name} appears at least twice in the config.`);
        }
        return {
            name: importsGroupConfig.name,
            nodesContainer: new nodes_containers_1.NodesContainer(sourceFile),
            orderNumber: index + 1
        };
    });
}
function parseMatchingRuleConfigs(sourceFile, importsGroups, matchingRuleConfigs) {
    if (!matchingRuleConfigs) {
        throw new Error('Invalid rule configuration. Matching rules are required.');
    }
    return matchingRuleConfigs.map((matchingRuleConfig) => {
        const foundImportsGroup = importsGroups.find(importsGroup => importsGroup.name === matchingRuleConfig['imports-group']);
        if (!foundImportsGroup) {
            throw new Error(`Imports group "${matchingRuleConfig['imports-group']}" has not been configured, yet a rule that targets that imports group exists.`);
        }
        return {
            importsGroup: foundImportsGroup,
            matches: get_imports_group_predicate_1.getImportsGroupPredicate(sourceFile, matchingRuleConfig)
        };
    });
}
