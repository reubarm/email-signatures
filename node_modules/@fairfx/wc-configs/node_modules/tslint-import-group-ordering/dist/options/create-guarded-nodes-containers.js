"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
const nodes_containers_1 = require("../nodes-containers");
const get_libraries_1 = require("../utils/get-libraries");
const remove_quotes_1 = require("../utils/remove-quotes");
const catchAllImportGroup = {
    type: types_1.ImportsGroupType.Project,
    regExp: /.*/
};
function createGuardedNodesContainers(options, sourceFile) {
    return options.importsGroups.concat(catchAllImportGroup).map(importsGroup => {
        const nodesContainer = new nodes_containers_1.NodesContainer(sourceFile);
        const predicate = getImportsGroupPredicate(importsGroup, sourceFile);
        return new nodes_containers_1.GuardedNodesContainer(nodesContainer, predicate);
    });
}
exports.createGuardedNodesContainers = createGuardedNodesContainers;
function getImportsGroupPredicate(importsGroup, sourceFile) {
    if (importsGroup.type === types_1.ImportsGroupType.ThirdParty) {
        return isThirdPartyImportDeclaration(sourceFile);
    }
    return importDeclarationMatchesRegExpFactory(sourceFile, importsGroup.regExp);
}
const isThirdPartyImportDeclarationFactory = (thirdPartyRegExps) => (sourceFile) => node => thirdPartyRegExps.some(regExp => regExp.test(getModuleSpecifier(sourceFile, node)));
const isThirdPartyImportDeclaration = isThirdPartyImportDeclarationFactory(get_libraries_1.getLibraries());
const importDeclarationMatchesRegExpFactory = (sourceFile, regExp) => node => regExp.test(getModuleSpecifier(sourceFile, node));
function getModuleSpecifier(sourceFile, node) {
    return remove_quotes_1.removeQuotes(node.moduleSpecifier.getText(sourceFile));
}
