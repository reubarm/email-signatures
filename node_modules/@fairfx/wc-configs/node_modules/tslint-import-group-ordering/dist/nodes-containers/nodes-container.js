"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class NodesContainer {
    constructor(sourceFile) {
        this.nodes = [];
        this.sourceFile = sourceFile;
    }
    /**
     * Nodes should be added in the order they appear in the source file.
     * @param node
     */
    addNode(node) {
        this.nodes.push(node);
    }
    copyNodesFrom(otherNodesContainer) {
        this.nodes.push(...otherNodesContainer.nodes);
        this.sortNodesByAscendingPosition();
    }
    getTextRange() {
        if (this.isEmpty()) {
            throw new Error('No nodes have been added');
        }
        const firstNode = this.nodes[0];
        const lastNode = this.nodes[this.nodes.length - 1];
        return {
            pos: firstNode.getFullStart(),
            end: lastNode.getEnd()
        };
    }
    isEmpty() {
        return this.nodes.length === 0;
    }
    toString() {
        const { nodes, sourceFile } = this;
        /**
         * NOTE: using `getFullText` preserves comments. It also preserves all the whitespace.
         * That is why multiple newlines have to be collapsed and the output has to be trimmed.
         */
        const rawOutput = nodes
            .map(node => node.getFullText(sourceFile))
            .join('\n');
        return trimAndCollapseNewLines(rawOutput);
    }
    sortNodesByAscendingPosition() {
        this.nodes.sort((a, b) => a.getStart(this.sourceFile) - b.getStart(this.sourceFile));
    }
}
exports.NodesContainer = NodesContainer;
const trimAndCollapseNewLines = (text) => text.replace(/(\r?\n)+/g, '\n').trim();
