"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.padding = exports.sizing = exports.isSpacingValue = exports.spacing = exports.color = exports.fontWeight = exports.fontSize = void 0;
const tokens = __importStar(require("./tokens"));
const px = (value) => `${value}px`;
exports.fontSize = size => ({
    base: px(tokens.size.font.base.value),
    body: px(tokens.size.font.base.value),
    cta: px(tokens.size.font.cta.value),
    placeholder: px(tokens.size.font.placeholder.value),
    small: px(tokens.size.font.small.value),
    large: px(tokens.size.font.large.value),
    h1: px(tokens.size.font.heading1.value),
    h2: px(tokens.size.font.heading2.value),
    h3: px(tokens.size.font.heading3.value),
    h4: px(tokens.size.font.heading4.value),
}[size] || size);
exports.fontWeight = weight => ({
    body: tokens.weight.font.body.value,
    heading: tokens.weight.font.heading.value,
    semi: tokens.weight.font.semi.value,
    bold: tokens.weight.font.bold.value,
    regular: tokens.weight.font.regular.value,
    medium: tokens.weight.font.medium.value,
}[weight]);
exports.color = colorKey => ({
    base: tokens.color.charcoal.base.value,
    dark: tokens.color.charcoal.base.value,
    light: tokens.color.white.base.value,
    lightBorder: tokens.color.mischka.base.value,
    disable: tokens.color.waterloo.base.value,
    danger: tokens.color.danger.base.value,
    brand: tokens.color.mango.base.value,
    muted: tokens.color.athens_gray.light.value,
}[colorKey]);
exports.spacing = keyname => ({
    zero: '0',
    small: px(tokens.size.base.value * 0.5),
    times0p75: px(tokens.size.base.value * 0.75),
    base: px(tokens.size.base.value),
    times1p5: px(tokens.size.base.value * 1.5),
    medium: px(tokens.size.base.value * 2),
    large: px(tokens.size.base.value * 4),
    xlarge: px(tokens.size.base.value * 6),
}[keyname]);
const spacingValuesInArray = [
    'zero',
    'small',
    'times0p75',
    'base',
    'times1p5',
    'medium',
    'large',
    'xlarge',
];
exports.isSpacingValue = (value) => spacingValuesInArray.includes(value);
exports.sizing = keyname => ({
    headerAction: px(56),
    action: px(tokens.size.base.value * 4),
}[keyname]);
exports.padding = exports.spacing;
//# sourceMappingURL=utils.js.map