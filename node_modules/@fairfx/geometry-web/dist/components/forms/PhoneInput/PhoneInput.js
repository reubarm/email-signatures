"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@emotion/core");
const react_1 = __importStar(require("react"));
const react_phone_input_2_1 = __importDefault(require("react-phone-input-2"));
const theme_1 = __importDefault(require("../../../theme"));
const PhoneInput_styles_1 = require("./PhoneInput.styles");
const ReactPhoneInputWrapper = theme_1.default(PhoneInput_styles_1.ReactPhoneInputWrapper) `
  ${({ hasLabel }) => hasLabel
    ? core_1.css `
          .react-tel-input .form-control {
            padding-top: 20px;
          }
        `
    : core_1.css `
          .special-label {
            display: none;
          }
        `}
`;
const PhoneInput = ({ onChange, isError, label }) => {
    const [value, setValue] = react_1.useState('');
    const handleOnChange = (val, data) => {
        const rawPhone = val
            .replace(/[^0-9]+/g, '')
            .slice(data.dialCode.length);
        const phone = `${data.dialCode}${rawPhone.charAt(0) === '0' ? rawPhone.substr(1) : rawPhone}`;
        setValue(phone);
        if (onChange) {
            onChange(phone);
        }
    };
    return (react_1.default.createElement(PhoneInput_styles_1.Wrapper, { isError: isError },
        react_1.default.createElement(ReactPhoneInputWrapper, { hasLabel: !!label },
            react_1.default.createElement(react_phone_input_2_1.default, { country: "gb", autoFormat: true, specialLabel: label, value: value, onChange: handleOnChange }))));
};
exports.default = PhoneInput;
//# sourceMappingURL=PhoneInput.js.map