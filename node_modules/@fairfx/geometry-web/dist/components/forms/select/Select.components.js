"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customSelectStyles = exports.Indicator = exports.Input = exports.CustomValueContainer = exports.Menu = void 0;
const react_1 = __importDefault(require("react"));
const react_select_1 = require("react-select");
const theme_1 = __importDefault(require("../../../theme"));
const tokens_1 = require("../../../themer/tokens");
const Animation = theme_1.default.div `
  .menu {
    animation: fade--in ${tokens_1.transition.base.value} ease-in-out;
  }

  @keyframes fade--in {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }
`;
exports.Menu = props => {
    const { children } = props;
    return (react_1.default.createElement(Animation, null,
        react_1.default.createElement(react_select_1.components.Menu, Object.assign({}, props, { className: "menu" }), children)));
};
exports.CustomValueContainer = props => {
    const { selectProps, children } = props;
    return (react_1.default.createElement(react_select_1.components.ValueContainer, Object.assign({}, props),
        react_1.default.createElement(react_select_1.components.Placeholder, Object.assign({}, props), selectProps.placeholder),
        react_1.default.Children.map(children, child => child && child.type !== react_select_1.components.Placeholder ? child : null)));
};
exports.Input = props => {
    const { selectProps } = props;
    let { autoComplete } = selectProps;
    if (!autoComplete) {
        autoComplete = props.autoComplete;
    }
    return react_1.default.createElement(react_select_1.components.Input, Object.assign({}, props, { autoComplete: autoComplete }));
};
const IndicatorContainer = theme_1.default.div `
  margin-right: ${tokens_1.sizes[8]}px;
  cursor: pointer;
  font-size: 0;
`;
const ClearButtonContainer = theme_1.default.button `
  padding: 0;
  margin: 0;
  background-color: transparent;
  border: none;
  box-shadow: none;
  cursor: pointer;
`;
exports.Indicator = props => {
    const { hasValue, selectProps } = props;
    if (selectProps.isDisabled) {
        return null;
    }
    if ((hasValue || selectProps.inputValue) && selectProps.isClearable) {
        return (react_1.default.createElement(IndicatorContainer, null,
            react_1.default.createElement(ClearButtonContainer, { onClick: props.clearValue, type: "button" },
                react_1.default.createElement("svg", { width: "18", height: "16", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
                    react_1.default.createElement("path", { d: "M9 6.278L2.5 0 .778 1.722 7.278 8l-6.5 6.278L2.5 16 9 9.722 15.5 16l1.722-1.722L10.722 8l6.5-6.278L15.5 0 9 6.278z", fill: "#262835" })))));
    }
    return (react_1.default.createElement(IndicatorContainer, null,
        react_1.default.createElement("svg", { width: "13", height: "8", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
            react_1.default.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M12.5 1.82l-6 5.68-6-5.68L1.89.5 6.5 4.87 11.11.5l1.39 1.32z", fill: "#262835" }))));
};
exports.customSelectStyles = (theme) => ({
    control: (provided, state) => {
        var _a, _b, _c;
        const { default: borderDefault, error: borderError, focused: borderFocused, complete, } = (_a = theme.context.colors.input) === null || _a === void 0 ? void 0 : _a.border;
        const { default: backgroundDefault, error: backgroundError, focused: backgroundFocused, } = (_b = theme.context.colors.input) === null || _b === void 0 ? void 0 : _b.background;
        let statusColor = (_c = theme.context.colors.input) === null || _c === void 0 ? void 0 : _c.border.default;
        let backgroundColor = backgroundDefault;
        if (state.isDisabled) {
            statusColor = borderDefault;
        }
        else if (state.selectProps.error) {
            statusColor = borderError;
        }
        else if (state.isFocused) {
            statusColor = borderFocused;
        }
        else if (state.hasValue || state.selectProps.inputValue) {
            statusColor = complete;
        }
        if (state.isDisabled) {
            backgroundColor = theme.context.colors.input.background.disabled;
        }
        else if (state.selectProps.error) {
            backgroundColor = backgroundError;
        }
        else if (state.isFocused) {
            backgroundColor = backgroundFocused;
        }
        return Object.assign(Object.assign({}, provided), { height: tokens_1.sizes[10], borderRadius: 0, backgroundColor, border: 'none', '&:hover': {}, boxShadow: `inset 0 -${tokens_1.sizes[2]}px 0 0 ${statusColor}`, transition: `${tokens_1.transition.base.value} linear`, transitionProperty: 'box-shadow, background-color' });
    },
    valueContainer: provided => (Object.assign(Object.assign({}, provided), { overflow: 'visible', cursor: 'text', height: tokens_1.sizes[10] })),
    menu: provided => (Object.assign(Object.assign({}, provided), { border: 'none', borderRadius: 0, boxShadow: `0 0 ${tokens_1.sizes[7]}px ${tokens_1.sizes[1]}px rgba(0, 0, 0, 0.1)`, marginTop: '0' })),
    menuList: provided => (Object.assign(Object.assign({}, provided), { padding: 0 })),
    option: (provided, { isSelected, isFocused, isDisabled }) => {
        let backgroundColor = theme.palette.white[0];
        if (isDisabled) {
            backgroundColor = theme.palette.grey[1];
        }
        else if (isSelected || isFocused) {
            backgroundColor = theme.palette.grey[0];
        }
        return Object.assign(Object.assign({}, provided), { backgroundColor, display: 'flex', alignItems: 'center', color: isDisabled ? theme.palette.grey[4] : theme.palette.midnightBlue[0], borderBottom: `${tokens_1.sizes[1]}px solid ${theme.palette.grey[2]}`, fontSize: tokens_1.size.font.base.value, lineHeight: 1.5, height: tokens_1.sizes[10], cursor: 'pointer' });
    },
    noOptionsMessage: provided => (Object.assign(Object.assign({}, provided), { backgroundColor: theme.palette.grey[0], display: 'flex', alignItems: 'center', justifyContent: 'center', color: theme.context.colors.input.label.disabled, borderBottom: `${tokens_1.sizes[1]}px solid ${theme.palette.grey[2]}`, fontSize: tokens_1.size.font.base.value, lineHeight: 1.5, height: tokens_1.sizes[10] })),
    loadingMessage: provided => (Object.assign(Object.assign({}, provided), { backgroundColor: theme.palette.grey[0], display: 'flex', alignItems: 'center', justifyContent: 'center', color: theme.context.colors.input.label.default, borderBottom: `${tokens_1.sizes[1]}px solid ${theme.palette.grey[2]}`, fontSize: tokens_1.size.font.base.value, lineHeight: 1.5, height: tokens_1.sizes[10] })),
    singleValue: (provided, state) => {
        const valueColor = state.isDisabled
            ? theme.context.colors.input.label.disabled
            : theme.palette.midnightBlue[0];
        return Object.assign(Object.assign({}, provided), { color: valueColor, width: '100%' });
    },
    input: provided => (Object.assign({}, provided)),
    placeholder: (provided, state) => {
        let placeholderColor = theme.context.colors.input.label.default;
        if (state.isDisabled) {
            placeholderColor = theme.context.colors.input.label.disabled;
        }
        else if (state.selectProps.error) {
            placeholderColor = theme.context.colors.input.label.error;
        }
        return Object.assign(Object.assign({}, provided), { position: 'absolute', color: placeholderColor, top: state.hasValue || state.selectProps.inputValue ? 13 : '50%', transition: `top ${tokens_1.transition.fast.value} ease-in, font-size ${tokens_1.transition.fast.value} ease-in`, fontWeight: (state.hasValue || state.selectProps.inputValue) && 'bold', fontSize: state.hasValue || state.selectProps.inputValue ? tokens_1.sizes[6] : tokens_1.sizes[7] });
    },
});
//# sourceMappingURL=Select.components.js.map