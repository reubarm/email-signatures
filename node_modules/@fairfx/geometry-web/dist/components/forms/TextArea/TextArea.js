"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Input_components_1 = require("../input/Input.components");
const useVariantModifier_1 = __importDefault(require("../shared/useVariantModifier"));
const TextArea_components_1 = require("./TextArea.components");
const noop = () => { };
const TextArea = (_a) => {
    var { onChange = noop, value, isReadonly = false, isError = false, isLocked = false, placeholder = '', onFocus = noop, onBlur = noop, testId = 'TextArea' } = _a, rest = __rest(_a, ["onChange", "value", "isReadonly", "isError", "isLocked", "placeholder", "onFocus", "onBlur", "testId"]);
    const { onUpdatedFocus, onUpdatedBlur, isFocused } = useVariantModifier_1.default({
        variant: 'Input',
        onFocus,
        onBlur,
        isError,
        isReadonly,
        value,
    });
    const isFilled = value.length > 0;
    return (react_1.default.createElement(Input_components_1.InputRoot, { isFocused: isFocused, isFilled: isFilled, isReadonly: isReadonly, isLocked: isLocked, isError: isError },
        placeholder && (react_1.default.createElement(Input_components_1.Placeholder, { isFocused: isFocused, isFilled: isFilled, isLocked: isLocked, isReadonly: isReadonly, isError: isError }, placeholder)),
        react_1.default.createElement(TextArea_components_1.TextAreaRoot, Object.assign({ "data-testid": testId && `${testId}_input`, disabled: isReadonly, onFocus: onUpdatedFocus, onBlur: onUpdatedBlur, value: value, onChange: onChange, rows: 1 }, rest))));
};
exports.default = TextArea;
//# sourceMappingURL=TextArea.js.map