"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const Tooltip_components_1 = require("./Tooltip.components");
const useHover = () => {
    const [isHovered, setIsHovered] = react_1.useState(false);
    const hoverRef = react_1.useRef(null);
    const handleMouseOver = () => setIsHovered(true);
    const handleMouseOut = () => setIsHovered(false);
    react_1.useEffect(() => {
        const elem = hoverRef.current;
        if (elem) {
            elem.addEventListener('mouseover', handleMouseOver);
            elem.addEventListener('mouseout', handleMouseOut);
            return () => {
                elem.removeEventListener('mouseover', handleMouseOver);
                elem.removeEventListener('mouseout', handleMouseOut);
            };
        }
        return () => { };
    }, [hoverRef.current]);
    return { hoverRef, isHovered };
};
const TooltipBox = ({ align = 'center', children, message, }) => {
    const { hoverRef, isHovered } = useHover();
    return (react_1.default.createElement(Tooltip_components_1.TooltipRoot, null,
        isHovered && (react_1.default.createElement(Tooltip_components_1.TooltipContent, { align: align },
            react_1.default.createElement(Tooltip_components_1.Text, { "data-testid": "tooltip_text" }, message))),
        react_1.default.createElement("div", { ref: hoverRef }, children)));
};
exports.default = TooltipBox;
//# sourceMappingURL=Tooltip.js.map