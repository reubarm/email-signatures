"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Arrow = exports.TextWrapper = exports.Line = exports.Content = exports.Main = exports.Collapsable = exports.DropdownRoot = void 0;
const core_1 = require("@emotion/core");
const is_prop_valid_1 = __importDefault(require("@emotion/is-prop-valid"));
const mediaQuery_1 = __importDefault(require("../../common/mediaQuery"));
const theme_1 = __importDefault(require("../../theme"));
const tokens_1 = require("../../themer/tokens");
const getBreakpoints = (size) => {
    switch (size) {
        case 'medium':
            return ['none', 'none', 'block'];
        case 'small':
            return ['none', 'block'];
        case 'large':
        default:
            return 'none';
    }
};
exports.DropdownRoot = theme_1.default.div `
  position: relative;
  &:focus {
    outline: 0;
  }
`;
exports.Collapsable = theme_1.default('div', {
    shouldForwardProp: is_prop_valid_1.default,
}) `
  position: absolute;
  background: ${tokens_1.color.white.base.value};
  width: 100%;
  ${mediaQuery_1.default.desktop} {
    width: 100%;
    left: 0;
  }
  opacity: 0;
  cursor: pointer;
  ${({ isActive }) => (!isActive ? `pointer-events: none` : ``)}

  > * {
    border-top: 1px solid ${tokens_1.color.black_haze.base.value};
    padding: ${tokens_1.sizes[8]}px;
    padding-left: ${tokens_1.sizes[7]}px;
    padding-right: ${tokens_1.sizes[7]}px;
  }

  ${({ isActive }) => isActive
    ? core_1.css `
          opacity: 1;
          pointer-events: 'all';
          box-shadow: ${tokens_1.color.boxShadow.base.value} -5px 0px 5px 0px;
        `
    : ''}
`;
exports.Main = theme_1.default.div `
  cursor: pointer;
  .dropdownPerson path {
    fill: ${tokens_1.color.casper.base.value};
  }

  .dropdownPersonActive path {
    fill: ${tokens_1.color.purple.base.value};
  }
`;
exports.Content = theme_1.default.div `
  position: relative;
  & > :first-of-type {
    padding: 20px;
    ${mediaQuery_1.default.desktop} {
      padding-right: ${tokens_1.sizes[9]}px;
      padding-left: inherit;
    }
  }
`;
exports.Line = theme_1.default('div', {
    shouldForwardProp: is_prop_valid_1.default,
}) `
  position: absolute;
  top: 0;
  ${mediaQuery_1.default.desktop} {
    top: ${tokens_1.spaces[2]}px;
  }
  left: 0;
  width: 100%;
  height: 3px;
  background: ${tokens_1.color.mango.base.value};
  opacity: 0;
  ${({ isActive }) => isActive
    ? core_1.css `
          opacity: 1;
        `
    : ''}
`;
exports.TextWrapper = theme_1.default('div', {
    shouldForwardProp: is_prop_valid_1.default,
}) `
  margin-right: ${tokens_1.spaces[7]}px;
  user-select: none;
  ${({ hideText }) => hideText
    ? core_1.css `
          display: ${getBreakpoints(hideText)};
        `
    : core_1.css `
          display: block;
        `}
`;
exports.Arrow = theme_1.default('div', {
    shouldForwardProp: is_prop_valid_1.default,
}) `
  display: none;
  ${mediaQuery_1.default.desktop} {
    display: block;
  }
  position: absolute;
  right: ${tokens_1.spaces[7]}px;
  width: 0;
  height: 0;
  margin-left: ${tokens_1.spaces[5]}px;
  border-left-color: transparent;
  border-right-color: transparent;
  border-right-style: solid;
  border-left-style: solid;
  border-top-style: solid;
  border-left-width: 4px;
  border-right-width: 4px;
  border-top-width: 4px;
  ${({ isActive }) => isActive
    ? core_1.css `
          transform: rotate(180deg);
        `
    : ''}
`;
//# sourceMappingURL=Dropdown.components.js.map