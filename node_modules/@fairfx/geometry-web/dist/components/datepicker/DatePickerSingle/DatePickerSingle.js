"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("react-dates/initialize");
const core_1 = require("@emotion/core");
const moment_1 = __importDefault(require("moment"));
const react_1 = __importStar(require("react"));
const react_dates_1 = require("react-dates");
const theme_1 = __importDefault(require("../../../theme"));
const Input_1 = __importDefault(require("../../forms/input/Input"));
const IconChevronLeft_1 = __importDefault(require("../../icons/IconChevronLeft"));
const IconChevronRight_1 = __importDefault(require("../../icons/IconChevronRight"));
const DatePickerSingle_components_1 = require("./DatePickerSingle.components");
const MonthRenderer = theme_1.default.div `
  display: flex;
  justify-content: center;
`;
const MonthYearSelect = theme_1.default.select `
  border: none;
  appearance: none;
  margin-right: 10px;
  color: #484848;
  font-size: 18px;
  font-weight: bold;
`;
const renderMonthElement = ({ month, onMonthSelect, onYearSelect }) => {
    const years = [];
    for (let i = moment_1.default().year() + 5; i >= moment_1.default().year() - 100; i--) {
        years.push(react_1.default.createElement("option", { value: i, key: `year-${i}` }, i));
    }
    return (react_1.default.createElement(MonthRenderer, null,
        react_1.default.createElement("div", null,
            react_1.default.createElement(MonthYearSelect, { value: month.month(), onChange: e => onMonthSelect(month, e.target.value) }, moment_1.default.months().map((label, value) => {
                return (react_1.default.createElement("option", { value: value, key: value }, label));
            }))),
        react_1.default.createElement("div", null,
            react_1.default.createElement(MonthYearSelect, { value: month.year(), onChange: e => onYearSelect(month, e.target.value) }, years))));
};
const DatePickerSingle = (props) => {
    const { date, onDateChange, onOutsideClick, calendarInfo, placeholder, isDayBlocked, viewingMonth, isReadOnly } = props, rest = __rest(props, ["date", "onDateChange", "onOutsideClick", "calendarInfo", "placeholder", "isDayBlocked", "viewingMonth", "isReadOnly"]);
    const [showDatePicker, setShowDatePicker] = react_1.useState(false);
    const toggleDatePicker = (toggle) => () => {
        setShowDatePicker(toggle);
    };
    const [disablePrev, setDisablePrev] = react_1.useState(true);
    const handleDisablePrev = (month) => {
        const currentMonth = moment_1.default().month();
        if (viewingMonth)
            viewingMonth(month);
        month.month() !== currentMonth
            ? setDisablePrev(false)
            : setDisablePrev(true);
    };
    const [focusedValue, setFocus] = react_1.useState(false);
    const onMomentDateChange = (dateParam) => onDateChange(dateParam ? new Date(dateParam.toDate()) : date);
    const todaysDate = document.querySelector('.CalendarDay__today');
    const addDisabledTodayStyles = () => todaysDate && todaysDate.classList.add('disabledToday');
    const removeDisabledTodayStyles = () => (todaysDate === null || todaysDate === void 0 ? void 0 : todaysDate.classList.contains('disabledToday')) &&
        todaysDate.classList.remove('disabledToday');
    react_1.useEffect(() => {
        if (document.querySelector('.CalendarDay[aria-disabled="true"].CalendarDay__today')) {
            addDisabledTodayStyles();
        }
        if (document.querySelector('.CalendarDay[aria-disabled="false"].CalendarDay__today')) {
            removeDisabledTodayStyles();
        }
    });
    const renderCalendarInfoComponent = () => (calendarInfo && (react_1.default.createElement(DatePickerSingle_components_1.DatePickerInfoWrapper, null,
        react_1.default.createElement("hr", null),
        react_1.default.createElement(DatePickerSingle_components_1.CalendarInfoWrapper, null,
            react_1.default.createElement("span", null, calendarInfo))))) || react_1.default.createElement(react_1.default.Fragment, null);
    return (react_1.default.createElement(DatePickerSingle_components_1.DatePickerContainer, null,
        react_1.default.createElement(Input_1.default, { value: date ? moment_1.default(date).format('dddd, D MMM YYYY') : '', placeholder: placeholder || '', onClick: toggleDatePicker(!showDatePicker), rightAddon: react_1.default.createElement(DatePickerSingle_components_1.StyledCalendar, null), testId: "datepicker-input", isReadonly: isReadOnly }),
        showDatePicker && (react_1.default.createElement(DatePickerSingle_components_1.DatePickerWrapper, null,
            react_1.default.createElement(core_1.Global, { styles: DatePickerSingle_components_1.DatePickerCSS }),
            react_1.default.createElement(react_dates_1.DayPickerSingleDateController, Object.assign({ date: date ? moment_1.default(date) : null, onDateChange: onMomentDateChange, focused: focusedValue, onFocusChange: ({ focused }) => setFocus(!!{ focused }), numberOfMonths: 1, isDayBlocked: isDayBlocked, hideKeyboardShortcutsPanel: true, renderMonthElement: renderMonthElement, onOutsideClick: (e) => {
                    setShowDatePicker(false);
                    if (onOutsideClick)
                        onOutsideClick(e);
                }, navPrev: disablePrev ? (react_1.default.createElement("button", { type: "button", "aria-label": "disabled button", hidden: true })) : (react_1.default.createElement(DatePickerSingle_components_1.IconContainer, { arrowLeft: true },
                    react_1.default.createElement(IconChevronLeft_1.default, null))), navNext: react_1.default.createElement(DatePickerSingle_components_1.IconContainer, { arrowLeft: false },
                    react_1.default.createElement(IconChevronRight_1.default, null)), renderCalendarInfo: () => renderCalendarInfoComponent(), onNextMonthClick: month => handleDisablePrev(month), onPrevMonthClick: month => handleDisablePrev(month) }, rest))))));
};
exports.default = DatePickerSingle;
//# sourceMappingURL=DatePickerSingle.js.map