"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToastConsumer = exports.ToastProvider = exports.useToasts = exports.ToastContext = void 0;
const react_1 = __importDefault(require("react"));
const toastsReducer_1 = __importDefault(require("./toastsReducer"));
const noop = () => { };
const defaultVal = {
    add: noop,
    remove: noop,
    empty: noop,
    toast: undefined,
};
const createTimestampId = () => `toast-${Date.now()}`;
exports.ToastContext = react_1.default.createContext(defaultVal);
exports.useToasts = () => react_1.default.useContext(exports.ToastContext);
const defaultDismissTimeByType = (type) => ({ success: 3000, error: 6000 }[type]);
exports.ToastProvider = ({ children }) => {
    const [toast, dispatch] = react_1.default.useReducer(toastsReducer_1.default, undefined);
    react_1.default.useEffect(() => () => toast && clearTimeout(toast.timeoutId));
    const add = (_a) => {
        var { dismissTimerInMs } = _a, toastProps = __rest(_a, ["dismissTimerInMs"]);
        if (toast) {
            clearTimeout(toast.timeoutId);
        }
        const id = createTimestampId();
        const timeoutId = setTimeout(() => dispatch({ type: 'REMOVE' }), dismissTimerInMs || defaultDismissTimeByType(toastProps.type));
        dispatch({ type: 'ADD', toast: Object.assign(Object.assign({}, toastProps), { id, timeoutId }) });
    };
    const empty = () => {
        if (toast) {
            dispatch({ type: 'REMOVE' });
        }
    };
    return (react_1.default.createElement(exports.ToastContext.Provider, { value: { add, empty, toast } }, children));
};
exports.ToastConsumer = exports.ToastContext.Consumer;
exports.default = exports.ToastContext;
//# sourceMappingURL=ToastManager.js.map