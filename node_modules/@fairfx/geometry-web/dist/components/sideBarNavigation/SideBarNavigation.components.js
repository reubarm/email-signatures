"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logo = exports.Navigation = exports.Action = exports.IconToggle = exports.SideBarNavigationRoot = exports.UL = exports.LogoWrapper = void 0;
const is_prop_valid_1 = __importDefault(require("@emotion/is-prop-valid"));
const theme_1 = __importDefault(require("../../theme"));
const transitions_1 = __importDefault(require("../../themer/base/transitions"));
const tokens_1 = require("../../themer/tokens");
const Button_1 = require("../Button");
const SIZES = {
    opened: '256px',
    base: '64px',
};
exports.LogoWrapper = theme_1.default('div') `
  padding: 20px 20px 0 20px;
`;
exports.UL = theme_1.default('ul') `
  margin-left: 0;
  padding-left: 0;
`;
const SidebarButton = theme_1.default(Button_1.PrimaryButton) `
  color: ${p => p.theme.context.colors.navigation.sidebar.actions.icon.default};
  background-color: transparent;

  &:hover {
    background-color: transparent;

    .leftIcon {
      path {
        fill: ${p => p.theme.context.colors.navigation.sidebar.actions.icon.hover};
      }
      line {
        stroke: ${p => p.theme.context.colors.navigation.sidebar.actions.icon.hover};
      }
    }
  }

  &:focus {
    box-shadow: 0 0 0 2px
      ${p => p.theme.context.colors.navigation.sidebar.actions.border.focused};
    outline: 0;
  }

  .leftIcon {
    path {
      fill: ${p => p.theme.context.colors.navigation.sidebar.actions.icon.default};
    }
    line {
      stroke: ${p => p.theme.context.colors.navigation.sidebar.actions.icon.default};
    }
  }
`;
exports.SideBarNavigationRoot = theme_1.default('div', {
    shouldForwardProp: is_prop_valid_1.default,
}) `
  background-color: ${tokens_1.color.charcoal.base.value};
  white-space: nowrap;
  position: relative;
  min-height: 100%;
  box-sizing: border-box;
  transition: ${transitions_1.default.base};
  overflow: hidden;

  ${props => props.isToggled ? `width: ${SIZES.opened};` : `width: ${SIZES.base};`}
`;
exports.IconToggle = theme_1.default(SidebarButton, {
    shouldForwardProp: prop => is_prop_valid_1.default(prop) || prop === 'icon',
}) `
  transition: ${transitions_1.default.base};
`;
exports.Action = theme_1.default('div') `
  display: flex;
  justify-content: flex-end;
`;
exports.Navigation = theme_1.default('nav') `
  position: fixed;
  width: inherit;
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: space-between;
  justify-content: space-between;
  background-color: ${p => p.theme.context.colors.navigation.sidebar.background};

  button {
    &:hover {
      cursor: pointer;
    }
  }
`;
exports.Logo = theme_1.default('button') `
  background-color: transparent;
  width: 100%;
  border: none;
  padding: 0;

  &:focus {
    outline: none;
  }
`;
//# sourceMappingURL=SideBarNavigation.components.js.map