"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TertiaryButton = exports.SecondaryButton = exports.PrimaryButton = exports.RootButton = exports.ChildrenContainer = exports.LoadingContainer = void 0;
/* eslint-disable no-nested-ternary */
const rgba_1 = __importDefault(require("polished/lib/color/rgba"));
const react_1 = __importDefault(require("react"));
const theme_1 = __importDefault(require("../../theme"));
const transitions_1 = __importDefault(require("../../themer/base/transitions"));
const tokens_1 = require("../../themer/tokens");
const Spinner_1 = __importDefault(require("../spinner/Spinner"));
// Emotion is shit so button forward requires to be any
const Button = react_1.default.forwardRef((props, ref) => {
    const { children, icon = null, size = 'large', minWidth = false, expanded = false, rightIcon = null, loading = false } = props, rest = __rest(props, ["children", "icon", "size", "minWidth", "expanded", "rightIcon", "loading"]);
    const iconOnly = !children && !!icon;
    const RightIcon = rightIcon;
    const Icon = icon;
    return (react_1.default.createElement(exports.RootButton, Object.assign({ ref: ref, size: size, iconOnly: iconOnly, minWidth: minWidth, expanded: expanded }, rest),
        react_1.default.createElement(exports.ChildrenContainer, { isLoading: loading },
            RightIcon && react_1.default.createElement(RightIcon, { className: "rightIcon" }),
            children,
            Icon && react_1.default.createElement(Icon, { className: "leftIcon" })),
        loading && (react_1.default.createElement(exports.LoadingContainer, null,
            react_1.default.createElement(Spinner_1.default, { version: size === 'large' ? 'page' : 'default', color: "currentColor" })))));
});
const BUTTON_DIMENSIONS_LARGE = 64;
const BUTTON_DIMENSIONS_MEDIUM = 40;
const BUTTON_DIMENSIONS_SMALL = 32;
const BUTTON_DIMENSIONS_XSMALL = 12;
const BUTTON_MIN_WIDTH = 340;
exports.LoadingContainer = theme_1.default.div `
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;
exports.ChildrenContainer = theme_1.default.span `
  opacity: ${p => (p.isLoading ? 0 : 1)};
  align-items: center;
  display: inline-flex;
`;
exports.RootButton = theme_1.default.button `
  position: relative;
  font-weight: bold;
  transition: all ${transitions_1.default.base};
  font-size: ${tokens_1.size.font.small.value}px;
  align-items: center;
  display: inline-flex;
  cursor: pointer;
  justify-content: center;
  border-radius: 0;
  border: none;
  user-select: none;

  .leftIcon,
  .rightIcon {
    path {
      fill: currentColor;
    }
    line {
      stroke: currentColor;
    }
  }

  .leftIcon {
    ${p => !p.iconOnly && `margin-left: ${tokens_1.sizes[6]}px`}
  }

  .rightIcon {
    ${p => !p.iconOnly && `margin-right: ${tokens_1.sizes[6]}px`}
  }

  height: ${p => p.size === 'large'
    ? BUTTON_DIMENSIONS_LARGE
    : p.size === 'medium'
        ? BUTTON_DIMENSIONS_MEDIUM
        : p.size === 'xsmall'
            ? BUTTON_DIMENSIONS_XSMALL
            : BUTTON_DIMENSIONS_SMALL}px;

  width: ${p => p.iconOnly
    ? p.size === 'large'
        ? `${BUTTON_DIMENSIONS_LARGE}px`
        : p.size === 'medium'
            ? `${BUTTON_DIMENSIONS_MEDIUM}px`
            : p.size === 'xsmall'
                ? `${BUTTON_DIMENSIONS_XSMALL}px`
                : `${BUTTON_DIMENSIONS_SMALL}px`
    : p.expanded
        ? '100%'
        : 'auto'};

  min-width: ${p => p.iconOnly ? 'auto' : p.minWidth ? BUTTON_MIN_WIDTH : tokens_1.sizes[10]}px;

  padding: ${p => p.iconOnly
    ? `0`
    : ['large', 'medium'].includes(p.size)
        ? `0 ${tokens_1.spaces[7]}px`
        : `0 ${tokens_1.spaces[5]}px`};

  :disabled {
    cursor: auto;
  }
`;
exports.PrimaryButton = theme_1.default(Button) `
  color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.primary.default; }};
  background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.primary.default; }};

  &:hover {
    color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.primary.hover; }};
    background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.primary.hover; }};
  }

  :disabled {
    color: ${p => {
    var _a;
    return rgba_1.default(((_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.primary.disabled) || '', 0.5);
}};
    background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.primary.disabled; }};
  }
`;
exports.SecondaryButton = theme_1.default(Button) `
  color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.secondary.default; }};
  background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.secondary.default; }};

  box-shadow: ${p => { var _a; return `inset 0 0 0 1px ${(_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.border.secondary.default}`; }};

  &:hover {
    color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.secondary.hover; }};
    background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.secondary.hover; }};

    box-shadow: ${p => { var _a; return `inset 0 0 0 1px ${(_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.border.secondary.hover}`; }};
  }

  &:focus {
    box-shadow: ${p => { var _a; return `inset 0 0 0 1px ${(_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.border.secondary.focused}`; }};
  }

  :disabled {
    color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.secondary.disabled; }};
    background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.secondary.disabled; }};
    box-shadow: ${p => { var _a; return `inset 0 0 0 1px ${(_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.border.secondary.disabled}`; }};
  }
`;
exports.TertiaryButton = theme_1.default(Button) `
  color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.tertiary.default; }};
  background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.tertiary.default; }};

  &:hover {
    color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.tertiary.hover; }};
    background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.tertiary.hover; }};
    text-decoration: underline;
  }

  :disabled {
    color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.foreground.tertiary.disabled; }};
    background-color: ${p => { var _a; return (_a = p.theme.context.colors.actions) === null || _a === void 0 ? void 0 : _a.background.tertiary.disabled; }};
    text-decoration: none;
  }
`;
//# sourceMappingURL=Button.components.js.map