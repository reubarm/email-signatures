"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web_1 = require("@fairfx/geometry-icons/web");
const react_1 = __importDefault(require("react"));
const react_dom_1 = __importDefault(require("react-dom"));
const hooks_1 = require("../../hooks");
const Button_1 = require("../Button");
const PrimitiveModal_components_1 = require("./PrimitiveModal.components");
const createDivElement = () => {
    if (typeof window !== 'undefined') {
        return document.createElement('div');
    }
    return undefined;
};
const getModalRoot = () => {
    if (typeof window !== 'undefined') {
        return document.getElementById('modal-root');
    }
    return null;
};
const PrimitiveModal = react_1.default.forwardRef((props, ref) => {
    const { children, padding = '4', open: propOpen = false, backdropVisible = true, closeButtonVisible = true, handleEscape = true, minWidth = '0', minHeight = '0', onClose, onOpen, overflow, } = props;
    const [container] = react_1.default.useState(createDivElement());
    const [modalRoot] = react_1.default.useState(getModalRoot());
    const [open, setOpen] = react_1.default.useState(propOpen);
    const modalRef = react_1.default.useRef(null);
    const handleClose = () => {
        if (onClose) {
            onClose();
        }
        setOpen(false);
    };
    const handleOpen = () => {
        if (onOpen) {
            onOpen();
        }
        setOpen(true);
    };
    const toggleOpen = () => {
        setOpen(!open);
    };
    react_1.default.useEffect(() => {
        if (modalRoot && container) {
            modalRoot.appendChild(container);
        }
        return () => {
            if (modalRoot && container) {
                modalRoot.removeChild(container);
            }
        };
    }, []);
    hooks_1.useEscape(modalRef, () => {
        if (handleEscape) {
            handleClose();
        }
    });
    react_1.default.useImperativeHandle(ref, () => ({
        setOpen,
        open,
        handleClose,
        handleOpen,
        toggleOpen,
    }));
    if (!container) {
        return null;
    }
    if (!open) {
        return null;
    }
    return react_dom_1.default.createPortal(react_1.default.createElement(PrimitiveModal_components_1.Backdrop, { "data-testid": "backdrop", backdropVisible: backdropVisible, className: "modal-backdrop" },
        react_1.default.createElement(PrimitiveModal_components_1.ModalRoot, { ref: modalRef, "data-testid": "modal", padding: padding, minWidth: minWidth, minHeight: minHeight, className: "modal-container", overflow: overflow },
            closeButtonVisible && (react_1.default.createElement(PrimitiveModal_components_1.CloseButtonWrapper, { padding: padding, className: "modal-close-button-wrapper" },
                react_1.default.createElement(Button_1.TertiaryButton, { type: "button", className: "modal-close-button", icon: web_1.IconExit, size: "small", onClick: handleClose }))),
            children)), container);
});
PrimitiveModal.displayName = 'PrimitiveModal';
exports.default = PrimitiveModal;
//# sourceMappingURL=PrimitiveModal.js.map