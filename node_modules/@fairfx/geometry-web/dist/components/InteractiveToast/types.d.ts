import React from 'react';
export declare type ToastType = 'error' | 'success';
declare type AddAction = {
    type: 'ADD';
    toast: ToastEntityAndTimeout;
};
declare type RemoveAction = {
    type: 'REMOVE';
};
export declare type ReducerAction = AddAction | RemoveAction;
export interface AddToastProps {
    content: string;
    type: ToastType;
    dismissTimerInMs?: number;
}
export declare type AddToastFn = (addToastProps: AddToastProps) => void;
export declare type EmptyToastFn = () => void;
export declare type ToastEntity = AddToastProps & {
    id: string;
};
export declare type ToastEntityAndTimeout = AddToastProps & ToastEntity & {
    timeoutId: any;
};
declare type RemoveToast = (toast: ToastEntityAndTimeout | undefined) => void;
export declare type RemoveToastFn = (dispatch: React.Dispatch<ReducerAction>) => (toastFromContext: ToastEntityAndTimeout) => RemoveToast;
export declare type ToastContextProps = {
    add: AddToastFn;
    empty: EmptyToastFn;
    toast?: ToastEntityAndTimeout;
};
export interface ToastMessageProps {
    message: string;
    type?: ToastType;
    onDismiss?: () => void;
    renderMessage?: (text: React.ReactNode) => React.ReactNode;
}
export declare type CreateOnToastDismissFn = (removeFn: RemoveToastFn) => (toast: ToastEntityAndTimeout) => () => void;
export {};
