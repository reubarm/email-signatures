"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const theme_1 = __importDefault(require("../../theme"));
const Box = theme_1.default.div `
  /* Margin */
  margin: ${p => {
    const margin = p.margin || p.m;
    return margin && p.theme.space[margin];
}};
  margin-top: ${p => {
    const marginTop = p.marginTop || p.mt;
    return marginTop && p.theme.space[marginTop];
}};
  margin-bottom: ${p => {
    const marginBottom = p.marginBottom || p.mb;
    return marginBottom && p.theme.space[marginBottom];
}};
  margin-left: ${p => {
    const marginLeft = p.marginLeft || p.ml;
    return marginLeft && p.theme.space[marginLeft];
}};
  margin-right: ${p => {
    const marginRight = p.marginRight || p.mr;
    return marginRight && p.theme.space[marginRight];
}};

  /* Padding */
  padding: ${p => {
    const padding = p.padding || p.p;
    return padding && p.theme.space[padding];
}};
  padding-top: ${p => {
    const paddingTop = p.paddingTop || p.pt;
    return paddingTop && p.theme.space[paddingTop];
}};
  padding-bottom: ${p => {
    const paddingBottom = p.paddingBottom || p.pb;
    return paddingBottom && p.theme.space[paddingBottom];
}};
  padding-left: ${p => {
    const paddingLeft = p.paddingLeft || p.pl;
    return paddingLeft && p.theme.space[paddingLeft];
}};
  padding-right: ${p => {
    const paddingRight = p.paddingRight || p.pr;
    return paddingRight && p.theme.space[paddingRight];
}};

  /* Background */
  background-color: ${p => {
    const backgroundColor = p.backgroundColor || p.bg;
    return backgroundColor && p.theme.palette[backgroundColor];
}};
  ${p => p.color && `color: ${p.theme.palette[p.color]};`}
  opacity: ${p => p.opacity};

  /* Layout */
  width: ${p => {
    const width = p.size || p.width || p.w;
    return width && p.theme.sizes[width];
}};
  height: ${p => {
    const height = p.size || p.height || p.h;
    return height && p.theme.sizes[height];
}};
  max-width: ${p => {
    const maxWidth = p.maxWidth || p.maxW;
    return maxWidth && p.theme.sizes[maxWidth];
}};
  max-height: ${p => {
    const maxHeight = p.maxHeight || p.maxH;
    return maxHeight && p.theme.sizes[maxHeight];
}};
  min-width: ${p => {
    const minWidth = p.minWidth || p.minW;
    return minWidth && p.theme.sizes[minWidth];
}};
  min-height: ${p => {
    const minHeight = p.minHeight || p.minH;
    return minHeight && p.theme.sizes[minHeight];
}};
  
  /* Display */
  display: ${p => p.d || p.display};

  /* Overflow */
  overflow: ${p => p.overflow};
  overflow-x: ${p => p.overflowX};
  overflow-y: ${p => p.overflowY};

  /* Flex */
  justify-content: ${p => p.justifyContent};
  align-content: ${p => p.alignContent};
  align-items: ${p => p.alignItems};
  flex-wrap: ${p => p.flexWrap};
  flex-direction: ${p => p.flexDirection};

  /* Position */
  position: ${p => p.pos || p.position};
  ${p => p.zIndex && `z-index: ${p.theme.zIndices[p.zIndex]};`}
  ${p => p.top && `top: ${p.theme.sizes[p.top]};`}
  ${p => p.right && `right: ${p.theme.sizes[p.right]};`}
  ${p => p.bottom && `bottom: ${p.theme.sizes[p.bottom]};`}
  ${p => p.left && `left: ${p.theme.sizes[p.left]};`}


  /* Shadow */
  text-shadow: ${p => p.textShadow};
  box-shadow: ${p => p.shadow || p.boxShadow};
`;
exports.default = Box;
//# sourceMappingURL=Box.js.map