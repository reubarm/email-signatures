"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.H = exports.P = void 0;
const react_1 = __importDefault(require("react"));
const provider_1 = require("../../theme/provider");
const Text_1 = __importDefault(require("../typography/Text"));
const Typography_mapping_1 = require("./Typography.mapping");
const Typography_styles_1 = require("./Typography.styles");
// Paragraph component, defaults to md size (16pt) w/out attributes
exports.P = ({ size = 'md', align = 'left', weight = 'regular', children, color = 'primary', marginBottom = '0', 'data-testid': dataTestid, }) => {
    var _a;
    const theme = provider_1.useTheme();
    return (react_1.default.createElement(Text_1.default, { as: "p", 
        // @ts-ignore
        style: {
            fontSize: Typography_mapping_1.paragraphSizes[size],
            fontWeight: Typography_mapping_1.fontWeight[weight],
            textAlign: align,
            color: (_a = theme.context.colors.typography) === null || _a === void 0 ? void 0 : _a[color],
            marginTop: 0,
            marginBottom: theme.space[`${marginBottom}`],
        }, "data-testid": dataTestid }, children));
};
exports.H = ({ variant = 1, align = 'left', weight = 'bold', children, color = 'primary', visualLevel, marginBottom = '0', 'data-testid': dataTestid, }) => {
    var _a;
    const theme = provider_1.useTheme();
    if (!variant && !!visualLevel) {
        // eslint-disable-next-line no-console
        console.error('Can not pass visualLevel without variant');
        return react_1.default.createElement(react_1.default.Fragment, null);
    }
    const level = visualLevel || variant || 1;
    return (react_1.default.createElement(Typography_styles_1.Heading
    // @ts-ignore
    , { 
        // @ts-ignore
        as: `h${variant}`, level: visualLevel || variant || 1, className: `heading-${level}`, 
        // @ts-ignore
        style: {
            fontWeight: Typography_mapping_1.fontWeight[weight],
            textAlign: align,
            color: (_a = theme.context.colors.typography) === null || _a === void 0 ? void 0 : _a[color],
            marginBottom: theme.space[`${marginBottom}`],
        }, "data-testid": dataTestid }, children));
};
//# sourceMappingURL=Typography.js.map